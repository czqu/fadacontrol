// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"context"
	"fadacontrol/internal/base/bootstrap"
	"fadacontrol/internal/base/conf"
	"fadacontrol/internal/base/data"
	"fadacontrol/internal/base/logger"
	"fadacontrol/internal/base/middleware"
	"fadacontrol/internal/controller/admin_controller"
	"fadacontrol/internal/controller/common_controller"
	"fadacontrol/internal/router/admin_router"
	"fadacontrol/internal/router/common_router"
	"fadacontrol/internal/service/auth_service"
	"fadacontrol/internal/service/control_pc"
	"fadacontrol/internal/service/credential_provider_service"
	"fadacontrol/internal/service/custom_command_service"
	"fadacontrol/internal/service/discovery_service"
	"fadacontrol/internal/service/http_service"
	"fadacontrol/internal/service/internal_service"
	"fadacontrol/internal/service/jwt_service"
	"fadacontrol/internal/service/remote_service"
	"fadacontrol/internal/service/unlock"
	"fadacontrol/internal/service/update_service"
	"fadacontrol/internal/service/user_service"
)

// Injectors from wire.go:

func initDesktopServiceApplication(ctx context.Context, db *conf.DatabaseConf) (*DesktopServiceApp, error) {
	exitChanStruct := conf.NewExitChanStruct()
	profilingBootstrap := bootstrap.NewProfilingBootstrap(ctx)
	controlPCService := control_pc.NewControlPCService()
	gormDB, err := data.NewDB(db)
	if err != nil {
		return nil, err
	}
	adapter, err := data.NewAdapterByDB(gormDB)
	if err != nil {
		return nil, err
	}
	enforcer, err := data.NewEnforcer(adapter)
	if err != nil {
		return nil, err
	}
	dataInitBootstrap := bootstrap.NewDataInitBootstrap(ctx, exitChanStruct, adapter, enforcer, gormDB)
	credentialProviderService := credential_provider_service.NewCredentialProviderService(gormDB)
	unLockService := unlock.NewUnLockService(credentialProviderService)
	remoteService := remote_service.NewRemoteService(controlPCService, unLockService, ctx, gormDB)
	remoteConnectBootstrap := bootstrap.NewRemoteConnectBootstrap(ctx, gormDB, remoteService)
	internalMasterService := internal_service.NewInternalMasterService(controlPCService, ctx)
	dataData := data.NewData(gormDB)
	loggerLogger := logger.NewLogger(ctx)
	discoverService := discovery_service.NewDiscoverService(gormDB, ctx)
	discoverBootstrap := bootstrap.NewDiscoverBootstrap(discoverService)
	jwtService := jwt_service.NewJwtService(gormDB)
	httpService := http_service.NewHttpService(gormDB, ctx)
	debugController := common_controller.NewDebugController(internalMasterService, ctx)
	updateService := update_service.NewUpdateService(gormDB)
	systemController := common_controller.NewSystemController(controlPCService, ctx, updateService)
	authService := auth_service.NewAuthService(enforcer)
	jwtMiddleware := middleware.NewJwtMiddleware(jwtService, authService)
	userService := user_service.NewUserService(gormDB)
	authController := common_controller.NewAuthController(userService, jwtService)
	customCommandService := custom_command_service.NewCustomCommandService(ctx)
	customCommandController := common_controller.NewCustomCommandController(ctx, customCommandService)
	unlockController := common_controller.NewUnlockController(unLockService)
	controlPCController := common_controller.NewControlPCController(ctx, controlPCService)
	commonRouter := common_router.NewCommonRouter(debugController, systemController, jwtMiddleware, authController, customCommandController, unlockController, controlPCController)
	httpController := admin_controller.NewHttpController(exitChanStruct, gormDB, httpService)
	remoteController := admin_controller.NewRemoteController(gormDB, remoteService)
	discoverController := admin_controller.NewDiscoverController(discoverService)
	adminRouter := admin_router.NewAdminRouter(debugController, httpController, systemController, jwtMiddleware, remoteController, unlockController, controlPCController, discoverController, authController)
	httpBootstrap := bootstrap.NewHttpBootstrap(jwtService, ctx, httpService, commonRouter, adminRouter)
	desktopMasterServiceBootstrap := bootstrap.NewDesktopMasterServiceBootstrap(exitChanStruct, profilingBootstrap, controlPCService, dataInitBootstrap, credentialProviderService, remoteConnectBootstrap, internalMasterService, ctx, dataData, loggerLogger, discoverBootstrap, httpBootstrap)
	desktopServiceApp := NewDesktopServiceApp(ctx, db, desktopMasterServiceBootstrap)
	return desktopServiceApp, nil
}

func initDesktopDaemonApplication(ctx context.Context) (*DesktopSlaveServiceApp, error) {
	loggerLogger := logger.NewLogger(ctx)
	exitChanStruct := conf.NewExitChanStruct()
	profilingBootstrap := bootstrap.NewProfilingBootstrap(ctx)
	controlPCService := control_pc.NewControlPCService()
	customCommandService := custom_command_service.NewCustomCommandService(ctx)
	internalSlaveService := internal_service.NewInternalSlaveService(exitChanStruct, customCommandService, controlPCService, ctx)
	desktopSlaveServiceBootstrap := bootstrap.NewDesktopSlaveServiceBootstrap(ctx, exitChanStruct, profilingBootstrap, controlPCService, loggerLogger, internalSlaveService)
	desktopSlaveServiceApp := NewDesktopSlaveServiceApp(loggerLogger, ctx, desktopSlaveServiceBootstrap)
	return desktopSlaveServiceApp, nil
}
