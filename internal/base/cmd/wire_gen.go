// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"fadacontrol/internal/base/bootstrap"
	"fadacontrol/internal/base/conf"
	"fadacontrol/internal/base/data"
	"fadacontrol/internal/base/logger"
	"fadacontrol/internal/base/middleware"
	"fadacontrol/internal/controller/admin_controller"
	"fadacontrol/internal/controller/common_controller"
	"fadacontrol/internal/router"
	"fadacontrol/internal/service/auth_service"
	"fadacontrol/internal/service/common_service"
	"fadacontrol/internal/service/control_pc"
	"fadacontrol/internal/service/credential_provider_service"
	"fadacontrol/internal/service/custom_command_service"
	"fadacontrol/internal/service/discovery_service"
	"fadacontrol/internal/service/http_service"
	"fadacontrol/internal/service/jwt_service"
	"fadacontrol/internal/service/remote_service"
	"fadacontrol/internal/service/unlock"
	"fadacontrol/internal/service/user_service"
)

// Injectors from wire.go:

func initDesktopServiceApplication(_conf *conf.Conf, db *conf.DatabaseConf) (*DesktopServiceApp, error) {
	loggerLogger := logger.NewLogger(_conf)
	gormDB, err := data.NewDB(db)
	if err != nil {
		return nil, err
	}
	adapter, err := data.NewAdapterByDB(gormDB)
	if err != nil {
		return nil, err
	}
	enforcer, err := data.NewEnforcer(adapter)
	if err != nil {
		return nil, err
	}
	dataInitBootstrap := bootstrap.NewDataInitBootstrap(adapter, enforcer, gormDB)
	credentialProviderService := credential_provider_service.NewCredentialProviderService(gormDB)
	chanGroup := conf.NewChanGroup()
	controlPCService := control_pc.NewControlPCService(chanGroup)
	unLockService := unlock.NewUnLockService(credentialProviderService)
	remoteService := remote_service.NewRemoteService(controlPCService, unLockService, _conf, gormDB)
	remoteConnectBootstrap := bootstrap.NewRemoteConnectBootstrap(_conf, gormDB, remoteService)
	customCommandService := custom_command_service.NewCustomCommandService(_conf)
	internalService := common_service.NewInternalService(customCommandService)
	internalServiceBootstrap := bootstrap.NewInternalServiceBootstrap(internalService)
	daemonConnectBootstrap := bootstrap.NewDaemonConnectBootstrap(chanGroup, _conf)
	dataData := data.NewData(gormDB)
	bleUnlockBootstrap := bootstrap.NewBleUnlockBootstrap(unLockService)
	discoverBootstrap := bootstrap.NewDiscoverBootstrap(gormDB)
	httpService := http_service.NewHttpService(gormDB)
	httpController := admin_controller.NewHttpController(gormDB, httpService)
	sysInfoController := common_controller.NewSysInfoController(_conf)
	jwtService := jwt_service.NewJwtService()
	authService := auth_service.NewAuthService(enforcer)
	jwtMiddleware := middleware.NewJwtMiddleware(jwtService, authService)
	remoteController := admin_controller.NewRemoteController(gormDB, remoteService)
	unlockController := common_controller.NewUnlockController(unLockService)
	controlPCController := common_controller.NewControlPCController(controlPCService)
	discoverService := discovery_service.NewDiscoverService(gormDB)
	discoverController := admin_controller.NewDiscoverController(discoverService)
	userService := user_service.NewUserService(gormDB)
	authController := common_controller.NewAuthController(userService, jwtService)
	adminRouter := router.NewAdminRouter(httpController, sysInfoController, jwtMiddleware, remoteController, unlockController, controlPCController, discoverController, authController)
	customCommandController := common_controller.NewCustomCommandController(_conf, customCommandService)
	commonRouter := router.NewCommonRouter(sysInfoController, jwtMiddleware, authController, customCommandController, unlockController, controlPCController)
	httpBootstrap := bootstrap.NewHttpBootstrap(_conf, gormDB, adminRouter, commonRouter)
	legacyControlService := control_pc.NewLegacyControlService(controlPCService, unLockService)
	legacyBootstrap := bootstrap.NewLegacyBootstrap(unLockService, gormDB, legacyControlService)
	desktopServiceBootstrap := bootstrap.NewRootBootstrap(dataInitBootstrap, credentialProviderService, remoteConnectBootstrap, internalServiceBootstrap, daemonConnectBootstrap, _conf, dataData, loggerLogger, bleUnlockBootstrap, discoverBootstrap, httpBootstrap, legacyBootstrap)
	desktopServiceApp := NewDesktopServiceApp(loggerLogger, _conf, db, desktopServiceBootstrap)
	return desktopServiceApp, nil
}

func initDesktopDaemonApplication(_conf *conf.Conf, db *conf.DatabaseConf) (*DesktopDaemonApp, error) {
	loggerLogger := logger.NewLogger(_conf)
	gormDB, err := data.NewDB(db)
	if err != nil {
		return nil, err
	}
	adapter, err := data.NewAdapterByDB(gormDB)
	if err != nil {
		return nil, err
	}
	enforcer, err := data.NewEnforcer(adapter)
	if err != nil {
		return nil, err
	}
	dataInitBootstrap := bootstrap.NewDataInitBootstrap(adapter, enforcer, gormDB)
	customCommandService := custom_command_service.NewCustomCommandService(_conf)
	internalService := common_service.NewInternalService(customCommandService)
	internalServiceBootstrap := bootstrap.NewInternalServiceBootstrap(internalService)
	desktopDaemonBootstrap := bootstrap.NewDesktopDaemonBootstrap(dataInitBootstrap, _conf, loggerLogger, internalServiceBootstrap)
	desktopDaemonApp := NewDesktopDaemonApp(loggerLogger, _conf, db, desktopDaemonBootstrap)
	return desktopDaemonApp, nil
}
