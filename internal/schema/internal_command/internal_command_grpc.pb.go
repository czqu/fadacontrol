// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: internal_command.proto

package internal_command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Base_RegisterClient_FullMethodName   = "/internal_command.Base/RegisterClient"
	Base_GetSentryOptions_FullMethodName = "/internal_command.Base/GetSentryOptions"
)

// BaseClient is the client API for Base service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseClient interface {
	RegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*RpcResponse, error)
	GetSentryOptions(ctx context.Context, in *GetSentryOptionsRequest, opts ...grpc.CallOption) (*RpcResponse, error)
}

type baseClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseClient(cc grpc.ClientConnInterface) BaseClient {
	return &baseClient{cc}
}

func (c *baseClient) RegisterClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*RpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Base_RegisterClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseClient) GetSentryOptions(ctx context.Context, in *GetSentryOptionsRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RpcResponse)
	err := c.cc.Invoke(ctx, Base_GetSentryOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServer is the server API for Base service.
// All implementations must embed UnimplementedBaseServer
// for forward compatibility.
type BaseServer interface {
	RegisterClient(context.Context, *ClientInfo) (*RpcResponse, error)
	GetSentryOptions(context.Context, *GetSentryOptionsRequest) (*RpcResponse, error)
	mustEmbedUnimplementedBaseServer()
}

// UnimplementedBaseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBaseServer struct{}

func (UnimplementedBaseServer) RegisterClient(context.Context, *ClientInfo) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedBaseServer) GetSentryOptions(context.Context, *GetSentryOptionsRequest) (*RpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSentryOptions not implemented")
}
func (UnimplementedBaseServer) mustEmbedUnimplementedBaseServer() {}
func (UnimplementedBaseServer) testEmbeddedByValue()              {}

// UnsafeBaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServer will
// result in compilation errors.
type UnsafeBaseServer interface {
	mustEmbedUnimplementedBaseServer()
}

func RegisterBaseServer(s grpc.ServiceRegistrar, srv BaseServer) {
	// If the following call pancis, it indicates UnimplementedBaseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Base_ServiceDesc, srv)
}

func _Base_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_RegisterClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).RegisterClient(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Base_GetSentryOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSentryOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServer).GetSentryOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Base_GetSentryOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServer).GetSentryOptions(ctx, req.(*GetSentryOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Base_ServiceDesc is the grpc.ServiceDesc for Base service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Base_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal_command.Base",
	HandlerType: (*BaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _Base_RegisterClient_Handler,
		},
		{
			MethodName: "GetSentryOptions",
			Handler:    _Base_GetSentryOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal_command.proto",
}

const (
	ExecuteCommand_RegisterInternalCommand_FullMethodName = "/internal_command.ExecuteCommand/RegisterInternalCommand"
)

// ExecuteCommandClient is the client API for ExecuteCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecuteCommandClient interface {
	RegisterInternalCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RpcStream, RpcStream], error)
}

type executeCommandClient struct {
	cc grpc.ClientConnInterface
}

func NewExecuteCommandClient(cc grpc.ClientConnInterface) ExecuteCommandClient {
	return &executeCommandClient{cc}
}

func (c *executeCommandClient) RegisterInternalCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RpcStream, RpcStream], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExecuteCommand_ServiceDesc.Streams[0], ExecuteCommand_RegisterInternalCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RpcStream, RpcStream]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExecuteCommand_RegisterInternalCommandClient = grpc.BidiStreamingClient[RpcStream, RpcStream]

// ExecuteCommandServer is the server API for ExecuteCommand service.
// All implementations must embed UnimplementedExecuteCommandServer
// for forward compatibility.
type ExecuteCommandServer interface {
	RegisterInternalCommand(grpc.BidiStreamingServer[RpcStream, RpcStream]) error
	mustEmbedUnimplementedExecuteCommandServer()
}

// UnimplementedExecuteCommandServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExecuteCommandServer struct{}

func (UnimplementedExecuteCommandServer) RegisterInternalCommand(grpc.BidiStreamingServer[RpcStream, RpcStream]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterInternalCommand not implemented")
}
func (UnimplementedExecuteCommandServer) mustEmbedUnimplementedExecuteCommandServer() {}
func (UnimplementedExecuteCommandServer) testEmbeddedByValue()                        {}

// UnsafeExecuteCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecuteCommandServer will
// result in compilation errors.
type UnsafeExecuteCommandServer interface {
	mustEmbedUnimplementedExecuteCommandServer()
}

func RegisterExecuteCommandServer(s grpc.ServiceRegistrar, srv ExecuteCommandServer) {
	// If the following call pancis, it indicates UnimplementedExecuteCommandServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExecuteCommand_ServiceDesc, srv)
}

func _ExecuteCommand_RegisterInternalCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecuteCommandServer).RegisterInternalCommand(&grpc.GenericServerStream[RpcStream, RpcStream]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExecuteCommand_RegisterInternalCommandServer = grpc.BidiStreamingServer[RpcStream, RpcStream]

// ExecuteCommand_ServiceDesc is the grpc.ServiceDesc for ExecuteCommand service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecuteCommand_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internal_command.ExecuteCommand",
	HandlerType: (*ExecuteCommandServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterInternalCommand",
			Handler:       _ExecuteCommand_RegisterInternalCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal_command.proto",
}
