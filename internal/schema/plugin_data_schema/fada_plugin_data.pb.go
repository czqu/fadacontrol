// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.1
// source: fada_plugin_data.proto

package plugin_data_schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 枚举：键盘和鼠标操作类型
type KeyMouseActionType int32

const (
	KeyMouseActionType_UnknownActionType  KeyMouseActionType = 0
	KeyMouseActionType_KeyPress           KeyMouseActionType = 1 // 键盘按下
	KeyMouseActionType_KeyRelease         KeyMouseActionType = 2 // 键盘释放
	KeyMouseActionType_MouseButtonPress   KeyMouseActionType = 3 // 按下
	KeyMouseActionType_MouseButtonRelease KeyMouseActionType = 4 // 释放
	KeyMouseActionType_MouseMove          KeyMouseActionType = 5 // 鼠标移动
	KeyMouseActionType_MouseWheel         KeyMouseActionType = 6 // 鼠标滚轮
)

// Enum value maps for KeyMouseActionType.
var (
	KeyMouseActionType_name = map[int32]string{
		0: "UnknownActionType",
		1: "KeyPress",
		2: "KeyRelease",
		3: "MouseButtonPress",
		4: "MouseButtonRelease",
		5: "MouseMove",
		6: "MouseWheel",
	}
	KeyMouseActionType_value = map[string]int32{
		"UnknownActionType":  0,
		"KeyPress":           1,
		"KeyRelease":         2,
		"MouseButtonPress":   3,
		"MouseButtonRelease": 4,
		"MouseMove":          5,
		"MouseWheel":         6,
	}
)

func (x KeyMouseActionType) Enum() *KeyMouseActionType {
	p := new(KeyMouseActionType)
	*p = x
	return p
}

func (x KeyMouseActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyMouseActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_fada_plugin_data_proto_enumTypes[0].Descriptor()
}

func (KeyMouseActionType) Type() protoreflect.EnumType {
	return &file_fada_plugin_data_proto_enumTypes[0]
}

func (x KeyMouseActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyMouseActionType.Descriptor instead.
func (KeyMouseActionType) EnumDescriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{0}
}

type MouseButtonType int32

const (
	MouseButtonType_UnknownMouseButtonType MouseButtonType = 0
	MouseButtonType_Left                   MouseButtonType = 1
	MouseButtonType_Right                  MouseButtonType = 2
	MouseButtonType_Middle                 MouseButtonType = 3
)

// Enum value maps for MouseButtonType.
var (
	MouseButtonType_name = map[int32]string{
		0: "UnknownMouseButtonType",
		1: "Left",
		2: "Right",
		3: "Middle",
	}
	MouseButtonType_value = map[string]int32{
		"UnknownMouseButtonType": 0,
		"Left":                   1,
		"Right":                  2,
		"Middle":                 3,
	}
)

func (x MouseButtonType) Enum() *MouseButtonType {
	p := new(MouseButtonType)
	*p = x
	return p
}

func (x MouseButtonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MouseButtonType) Descriptor() protoreflect.EnumDescriptor {
	return file_fada_plugin_data_proto_enumTypes[1].Descriptor()
}

func (MouseButtonType) Type() protoreflect.EnumType {
	return &file_fada_plugin_data_proto_enumTypes[1]
}

func (x MouseButtonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MouseButtonType.Descriptor instead.
func (MouseButtonType) EnumDescriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{1}
}

// 键盘按键类型（扩展更多的按键类型）
type KeyType int32

const (
	KeyType_UnknownKeyType KeyType = 0
	KeyType_Alt            KeyType = 1
	KeyType_AltGr          KeyType = 2
	KeyType_Backspace      KeyType = 3
	KeyType_CapsLock       KeyType = 4
	KeyType_ControlLeft    KeyType = 5
	KeyType_ControlRight   KeyType = 6
	KeyType_Delete         KeyType = 7
	KeyType_DownArrow      KeyType = 8
	KeyType_End            KeyType = 9
	KeyType_Escape         KeyType = 10
	KeyType_F1             KeyType = 11
	KeyType_F10            KeyType = 12
	KeyType_F11            KeyType = 13
	KeyType_F12            KeyType = 14
	KeyType_F2             KeyType = 15
	KeyType_F3             KeyType = 16
	KeyType_F4             KeyType = 17
	KeyType_F5             KeyType = 18
	KeyType_F6             KeyType = 19
	KeyType_F7             KeyType = 20
	KeyType_F8             KeyType = 21
	KeyType_F9             KeyType = 22
	KeyType_Home           KeyType = 23
	KeyType_LeftArrow      KeyType = 24
	KeyType_MetaLeft       KeyType = 25 // also known as "windows", "super", and "command"
	KeyType_MetaRight      KeyType = 26 // also known as "windows", "super", and "command"
	KeyType_PageDown       KeyType = 27
	KeyType_PageUp         KeyType = 28
	KeyType_Return         KeyType = 29
	KeyType_RightArrow     KeyType = 30
	KeyType_ShiftLeft      KeyType = 31
	KeyType_ShiftRight     KeyType = 32
	KeyType_Space          KeyType = 33
	KeyType_Tab            KeyType = 34
	KeyType_UpArrow        KeyType = 35
	KeyType_PrintScreen    KeyType = 36
	KeyType_ScrollLock     KeyType = 37
	KeyType_Pause          KeyType = 38
	KeyType_NumLock        KeyType = 39
	KeyType_BackQuote      KeyType = 40
	KeyType_Num1           KeyType = 41
	KeyType_Num2           KeyType = 42
	KeyType_Num3           KeyType = 43
	KeyType_Num4           KeyType = 44
	KeyType_Num5           KeyType = 45
	KeyType_Num6           KeyType = 46
	KeyType_Num7           KeyType = 47
	KeyType_Num8           KeyType = 48
	KeyType_Num9           KeyType = 49
	KeyType_Num0           KeyType = 50
	KeyType_Minus          KeyType = 51
	KeyType_Equal          KeyType = 52
	KeyType_KeyQ           KeyType = 53
	KeyType_KeyW           KeyType = 54
	KeyType_KeyE           KeyType = 55
	KeyType_KeyR           KeyType = 56
	KeyType_KeyT           KeyType = 57
	KeyType_KeyY           KeyType = 58
	KeyType_KeyU           KeyType = 59
	KeyType_KeyI           KeyType = 60
	KeyType_KeyO           KeyType = 61
	KeyType_KeyP           KeyType = 62
	KeyType_LeftBracket    KeyType = 63
	KeyType_RightBracket   KeyType = 64
	KeyType_KeyA           KeyType = 65
	KeyType_KeyS           KeyType = 66
	KeyType_KeyD           KeyType = 67
	KeyType_KeyF           KeyType = 68
	KeyType_KeyG           KeyType = 69
	KeyType_KeyH           KeyType = 70
	KeyType_KeyJ           KeyType = 71
	KeyType_KeyK           KeyType = 72
	KeyType_KeyL           KeyType = 73
	KeyType_SemiColon      KeyType = 74
	KeyType_Quote          KeyType = 75
	KeyType_BackSlash      KeyType = 76
	KeyType_IntlBackslash  KeyType = 77
	KeyType_KeyZ           KeyType = 78
	KeyType_KeyX           KeyType = 79
	KeyType_KeyC           KeyType = 80
	KeyType_KeyV           KeyType = 81
	KeyType_KeyB           KeyType = 82
	KeyType_KeyN           KeyType = 83
	KeyType_KeyM           KeyType = 84
	KeyType_Comma          KeyType = 85
	KeyType_Dot            KeyType = 86
	KeyType_Slash          KeyType = 87
	KeyType_Insert         KeyType = 88
	KeyType_KpReturn       KeyType = 89
	KeyType_KpMinus        KeyType = 90
	KeyType_KpPlus         KeyType = 91
	KeyType_KpMultiply     KeyType = 92
	KeyType_KpDivide       KeyType = 93
	KeyType_Kp0            KeyType = 94
	KeyType_Kp1            KeyType = 95
	KeyType_Kp2            KeyType = 96
	KeyType_Kp3            KeyType = 97
	KeyType_Kp4            KeyType = 98
	KeyType_Kp5            KeyType = 99
	KeyType_Kp6            KeyType = 100
	KeyType_Kp7            KeyType = 101
	KeyType_Kp8            KeyType = 102
	KeyType_Kp9            KeyType = 103
	KeyType_KpDelete       KeyType = 104
	KeyType_Function       KeyType = 105
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0:   "UnknownKeyType",
		1:   "Alt",
		2:   "AltGr",
		3:   "Backspace",
		4:   "CapsLock",
		5:   "ControlLeft",
		6:   "ControlRight",
		7:   "Delete",
		8:   "DownArrow",
		9:   "End",
		10:  "Escape",
		11:  "F1",
		12:  "F10",
		13:  "F11",
		14:  "F12",
		15:  "F2",
		16:  "F3",
		17:  "F4",
		18:  "F5",
		19:  "F6",
		20:  "F7",
		21:  "F8",
		22:  "F9",
		23:  "Home",
		24:  "LeftArrow",
		25:  "MetaLeft",
		26:  "MetaRight",
		27:  "PageDown",
		28:  "PageUp",
		29:  "Return",
		30:  "RightArrow",
		31:  "ShiftLeft",
		32:  "ShiftRight",
		33:  "Space",
		34:  "Tab",
		35:  "UpArrow",
		36:  "PrintScreen",
		37:  "ScrollLock",
		38:  "Pause",
		39:  "NumLock",
		40:  "BackQuote",
		41:  "Num1",
		42:  "Num2",
		43:  "Num3",
		44:  "Num4",
		45:  "Num5",
		46:  "Num6",
		47:  "Num7",
		48:  "Num8",
		49:  "Num9",
		50:  "Num0",
		51:  "Minus",
		52:  "Equal",
		53:  "KeyQ",
		54:  "KeyW",
		55:  "KeyE",
		56:  "KeyR",
		57:  "KeyT",
		58:  "KeyY",
		59:  "KeyU",
		60:  "KeyI",
		61:  "KeyO",
		62:  "KeyP",
		63:  "LeftBracket",
		64:  "RightBracket",
		65:  "KeyA",
		66:  "KeyS",
		67:  "KeyD",
		68:  "KeyF",
		69:  "KeyG",
		70:  "KeyH",
		71:  "KeyJ",
		72:  "KeyK",
		73:  "KeyL",
		74:  "SemiColon",
		75:  "Quote",
		76:  "BackSlash",
		77:  "IntlBackslash",
		78:  "KeyZ",
		79:  "KeyX",
		80:  "KeyC",
		81:  "KeyV",
		82:  "KeyB",
		83:  "KeyN",
		84:  "KeyM",
		85:  "Comma",
		86:  "Dot",
		87:  "Slash",
		88:  "Insert",
		89:  "KpReturn",
		90:  "KpMinus",
		91:  "KpPlus",
		92:  "KpMultiply",
		93:  "KpDivide",
		94:  "Kp0",
		95:  "Kp1",
		96:  "Kp2",
		97:  "Kp3",
		98:  "Kp4",
		99:  "Kp5",
		100: "Kp6",
		101: "Kp7",
		102: "Kp8",
		103: "Kp9",
		104: "KpDelete",
		105: "Function",
	}
	KeyType_value = map[string]int32{
		"UnknownKeyType": 0,
		"Alt":            1,
		"AltGr":          2,
		"Backspace":      3,
		"CapsLock":       4,
		"ControlLeft":    5,
		"ControlRight":   6,
		"Delete":         7,
		"DownArrow":      8,
		"End":            9,
		"Escape":         10,
		"F1":             11,
		"F10":            12,
		"F11":            13,
		"F12":            14,
		"F2":             15,
		"F3":             16,
		"F4":             17,
		"F5":             18,
		"F6":             19,
		"F7":             20,
		"F8":             21,
		"F9":             22,
		"Home":           23,
		"LeftArrow":      24,
		"MetaLeft":       25,
		"MetaRight":      26,
		"PageDown":       27,
		"PageUp":         28,
		"Return":         29,
		"RightArrow":     30,
		"ShiftLeft":      31,
		"ShiftRight":     32,
		"Space":          33,
		"Tab":            34,
		"UpArrow":        35,
		"PrintScreen":    36,
		"ScrollLock":     37,
		"Pause":          38,
		"NumLock":        39,
		"BackQuote":      40,
		"Num1":           41,
		"Num2":           42,
		"Num3":           43,
		"Num4":           44,
		"Num5":           45,
		"Num6":           46,
		"Num7":           47,
		"Num8":           48,
		"Num9":           49,
		"Num0":           50,
		"Minus":          51,
		"Equal":          52,
		"KeyQ":           53,
		"KeyW":           54,
		"KeyE":           55,
		"KeyR":           56,
		"KeyT":           57,
		"KeyY":           58,
		"KeyU":           59,
		"KeyI":           60,
		"KeyO":           61,
		"KeyP":           62,
		"LeftBracket":    63,
		"RightBracket":   64,
		"KeyA":           65,
		"KeyS":           66,
		"KeyD":           67,
		"KeyF":           68,
		"KeyG":           69,
		"KeyH":           70,
		"KeyJ":           71,
		"KeyK":           72,
		"KeyL":           73,
		"SemiColon":      74,
		"Quote":          75,
		"BackSlash":      76,
		"IntlBackslash":  77,
		"KeyZ":           78,
		"KeyX":           79,
		"KeyC":           80,
		"KeyV":           81,
		"KeyB":           82,
		"KeyN":           83,
		"KeyM":           84,
		"Comma":          85,
		"Dot":            86,
		"Slash":          87,
		"Insert":         88,
		"KpReturn":       89,
		"KpMinus":        90,
		"KpPlus":         91,
		"KpMultiply":     92,
		"KpDivide":       93,
		"Kp0":            94,
		"Kp1":            95,
		"Kp2":            96,
		"Kp3":            97,
		"Kp4":            98,
		"Kp5":            99,
		"Kp6":            100,
		"Kp7":            101,
		"Kp8":            102,
		"Kp9":            103,
		"KpDelete":       104,
		"Function":       105,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_fada_plugin_data_proto_enumTypes[2].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_fada_plugin_data_proto_enumTypes[2]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{2}
}

type MessageType int32

const (
	MessageType_UnknownMessageType           MessageType = 0
	MessageType_MsgRespType                  MessageType = 1
	MessageType_PluginInfoRequestMsgType     MessageType = 2
	MessageType_KeyMouseRequestMsgType       MessageType = 3
	MessageType_GetDisplayInfoRequestMsgType MessageType = 4
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "UnknownMessageType",
		1: "MsgRespType",
		2: "PluginInfoRequestMsgType",
		3: "KeyMouseRequestMsgType",
		4: "GetDisplayInfoRequestMsgType",
	}
	MessageType_value = map[string]int32{
		"UnknownMessageType":           0,
		"MsgRespType":                  1,
		"PluginInfoRequestMsgType":     2,
		"KeyMouseRequestMsgType":       3,
		"GetDisplayInfoRequestMsgType": 4,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_fada_plugin_data_proto_enumTypes[3].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_fada_plugin_data_proto_enumTypes[3]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{3}
}

type PluginInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PluginInfoRequest) Reset() {
	*x = PluginInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fada_plugin_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfoRequest) ProtoMessage() {}

func (x *PluginInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fada_plugin_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfoRequest.ProtoReflect.Descriptor instead.
func (*PluginInfoRequest) Descriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{0}
}

type PluginInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PluginInfoResponse) Reset() {
	*x = PluginInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fada_plugin_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfoResponse) ProtoMessage() {}

func (x *PluginInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fada_plugin_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfoResponse.ProtoReflect.Descriptor instead.
func (*PluginInfoResponse) Descriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{1}
}

func (x *PluginInfoResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PluginInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// 请求消息：键盘和鼠标的统一数据结构
type KeyMouseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Input:
	//
	//	*KeyMouseRequest_KeyEvent
	//	*KeyMouseRequest_MouseEvent
	Input isKeyMouseRequest_Input `protobuf_oneof:"input"`
}

func (x *KeyMouseRequest) Reset() {
	*x = KeyMouseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fada_plugin_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMouseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMouseRequest) ProtoMessage() {}

func (x *KeyMouseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fada_plugin_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMouseRequest.ProtoReflect.Descriptor instead.
func (*KeyMouseRequest) Descriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{2}
}

func (m *KeyMouseRequest) GetInput() isKeyMouseRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *KeyMouseRequest) GetKeyEvent() *KeyEvent {
	if x, ok := x.GetInput().(*KeyMouseRequest_KeyEvent); ok {
		return x.KeyEvent
	}
	return nil
}

func (x *KeyMouseRequest) GetMouseEvent() *MouseEvent {
	if x, ok := x.GetInput().(*KeyMouseRequest_MouseEvent); ok {
		return x.MouseEvent
	}
	return nil
}

type isKeyMouseRequest_Input interface {
	isKeyMouseRequest_Input()
}

type KeyMouseRequest_KeyEvent struct {
	KeyEvent *KeyEvent `protobuf:"bytes,1,opt,name=key_event,json=keyEvent,proto3,oneof"` // 键盘事件
}

type KeyMouseRequest_MouseEvent struct {
	MouseEvent *MouseEvent `protobuf:"bytes,2,opt,name=mouse_event,json=mouseEvent,proto3,oneof"` // 鼠标事件
}

func (*KeyMouseRequest_KeyEvent) isKeyMouseRequest_Input() {}

func (*KeyMouseRequest_MouseEvent) isKeyMouseRequest_Input() {}

// 键盘事件结构
type KeyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action KeyMouseActionType `protobuf:"varint,1,opt,name=action,proto3,enum=KeyMouseActionType" json:"action,omitempty"` // 键盘操作类型（按下/释放）
	Key    KeyType            `protobuf:"varint,2,opt,name=key,proto3,enum=KeyType" json:"key,omitempty"`                  // 键盘按键类型
}

func (x *KeyEvent) Reset() {
	*x = KeyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fada_plugin_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyEvent) ProtoMessage() {}

func (x *KeyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_fada_plugin_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyEvent.ProtoReflect.Descriptor instead.
func (*KeyEvent) Descriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{3}
}

func (x *KeyEvent) GetAction() KeyMouseActionType {
	if x != nil {
		return x.Action
	}
	return KeyMouseActionType_UnknownActionType
}

func (x *KeyEvent) GetKey() KeyType {
	if x != nil {
		return x.Key
	}
	return KeyType_UnknownKeyType
}

// 鼠标事件结构
type MouseEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action      KeyMouseActionType `protobuf:"varint,1,opt,name=action,proto3,enum=KeyMouseActionType" json:"action,omitempty"`        // 鼠标操作类型（按下/释放/移动/滚轮）
	Button      MouseButtonType    `protobuf:"varint,2,opt,name=button,proto3,enum=MouseButtonType" json:"button,omitempty"`           // 鼠标按键类型（左键/右键/中键）
	X           float64            `protobuf:"fixed64,3,opt,name=x,proto3" json:"x,omitempty"`                                         // 鼠标的x坐标
	Y           float64            `protobuf:"fixed64,4,opt,name=y,proto3" json:"y,omitempty"`                                         // 鼠标的y坐标
	WheelDeltaX int64              `protobuf:"varint,5,opt,name=wheel_delta_x,json=wheelDeltaX,proto3" json:"wheel_delta_x,omitempty"` // 鼠标滚轮的变化量
	WheelDeltaY int64              `protobuf:"varint,6,opt,name=wheel_delta_y,json=wheelDeltaY,proto3" json:"wheel_delta_y,omitempty"`
}

func (x *MouseEvent) Reset() {
	*x = MouseEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fada_plugin_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MouseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseEvent) ProtoMessage() {}

func (x *MouseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_fada_plugin_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseEvent.ProtoReflect.Descriptor instead.
func (*MouseEvent) Descriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{4}
}

func (x *MouseEvent) GetAction() KeyMouseActionType {
	if x != nil {
		return x.Action
	}
	return KeyMouseActionType_UnknownActionType
}

func (x *MouseEvent) GetButton() MouseButtonType {
	if x != nil {
		return x.Button
	}
	return MouseButtonType_UnknownMouseButtonType
}

func (x *MouseEvent) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MouseEvent) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *MouseEvent) GetWheelDeltaX() int64 {
	if x != nil {
		return x.WheelDeltaX
	}
	return 0
}

func (x *MouseEvent) GetWheelDeltaY() int64 {
	if x != nil {
		return x.WheelDeltaY
	}
	return 0
}

type GetDisPlayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDisPlayInfoRequest) Reset() {
	*x = GetDisPlayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fada_plugin_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDisPlayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDisPlayInfoRequest) ProtoMessage() {}

func (x *GetDisPlayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fada_plugin_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDisPlayInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDisPlayInfoRequest) Descriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{5}
}

type DisPlayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisPlayInfoRequest) Reset() {
	*x = DisPlayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fada_plugin_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisPlayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisPlayInfoRequest) ProtoMessage() {}

func (x *DisPlayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fada_plugin_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisPlayInfoRequest.ProtoReflect.Descriptor instead.
func (*DisPlayInfoRequest) Descriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{6}
}

type MsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// Types that are assignable to Body:
	//
	//	*MsgResp_PluginInfoResponse
	//	*MsgResp_DisplayInfoResp
	Body isMsgResp_Body `protobuf_oneof:"body"`
}

func (x *MsgResp) Reset() {
	*x = MsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fada_plugin_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgResp) ProtoMessage() {}

func (x *MsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_fada_plugin_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgResp.ProtoReflect.Descriptor instead.
func (*MsgResp) Descriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{7}
}

func (x *MsgResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MsgResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (m *MsgResp) GetBody() isMsgResp_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *MsgResp) GetPluginInfoResponse() *PluginInfoResponse {
	if x, ok := x.GetBody().(*MsgResp_PluginInfoResponse); ok {
		return x.PluginInfoResponse
	}
	return nil
}

func (x *MsgResp) GetDisplayInfoResp() *DisplayInfoResp {
	if x, ok := x.GetBody().(*MsgResp_DisplayInfoResp); ok {
		return x.DisplayInfoResp
	}
	return nil
}

type isMsgResp_Body interface {
	isMsgResp_Body()
}

type MsgResp_PluginInfoResponse struct {
	PluginInfoResponse *PluginInfoResponse `protobuf:"bytes,3,opt,name=PluginInfoResponse,proto3,oneof"`
}

type MsgResp_DisplayInfoResp struct {
	DisplayInfoResp *DisplayInfoResp `protobuf:"bytes,4,opt,name=displayInfoResp,proto3,oneof"`
}

func (*MsgResp_PluginInfoResponse) isMsgResp_Body() {}

func (*MsgResp_DisplayInfoResp) isMsgResp_Body() {}

type DisplayInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  uint64 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *DisplayInfoResp) Reset() {
	*x = DisplayInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fada_plugin_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayInfoResp) ProtoMessage() {}

func (x *DisplayInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_fada_plugin_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayInfoResp.ProtoReflect.Descriptor instead.
func (*DisplayInfoResp) Descriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{8}
}

func (x *DisplayInfoResp) GetWidth() uint64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *DisplayInfoResp) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type PluginMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=MessageType" json:"message_type,omitempty"`
	// Types that are assignable to Body:
	//
	//	*PluginMessage_Resp
	//	*PluginMessage_PluginInfoRequest
	//	*PluginMessage_KeyMouseMoveRequest
	//	*PluginMessage_GetDisPlayInfoRequest
	Body isPluginMessage_Body `protobuf_oneof:"body"`
}

func (x *PluginMessage) Reset() {
	*x = PluginMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fada_plugin_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginMessage) ProtoMessage() {}

func (x *PluginMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fada_plugin_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginMessage.ProtoReflect.Descriptor instead.
func (*PluginMessage) Descriptor() ([]byte, []int) {
	return file_fada_plugin_data_proto_rawDescGZIP(), []int{9}
}

func (x *PluginMessage) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_UnknownMessageType
}

func (m *PluginMessage) GetBody() isPluginMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *PluginMessage) GetResp() *MsgResp {
	if x, ok := x.GetBody().(*PluginMessage_Resp); ok {
		return x.Resp
	}
	return nil
}

func (x *PluginMessage) GetPluginInfoRequest() *PluginInfoRequest {
	if x, ok := x.GetBody().(*PluginMessage_PluginInfoRequest); ok {
		return x.PluginInfoRequest
	}
	return nil
}

func (x *PluginMessage) GetKeyMouseMoveRequest() *KeyMouseRequest {
	if x, ok := x.GetBody().(*PluginMessage_KeyMouseMoveRequest); ok {
		return x.KeyMouseMoveRequest
	}
	return nil
}

func (x *PluginMessage) GetGetDisPlayInfoRequest() *GetDisPlayInfoRequest {
	if x, ok := x.GetBody().(*PluginMessage_GetDisPlayInfoRequest); ok {
		return x.GetDisPlayInfoRequest
	}
	return nil
}

type isPluginMessage_Body interface {
	isPluginMessage_Body()
}

type PluginMessage_Resp struct {
	Resp *MsgResp `protobuf:"bytes,2,opt,name=resp,proto3,oneof"`
}

type PluginMessage_PluginInfoRequest struct {
	PluginInfoRequest *PluginInfoRequest `protobuf:"bytes,3,opt,name=pluginInfoRequest,proto3,oneof"`
}

type PluginMessage_KeyMouseMoveRequest struct {
	KeyMouseMoveRequest *KeyMouseRequest `protobuf:"bytes,4,opt,name=keyMouseMoveRequest,proto3,oneof"`
}

type PluginMessage_GetDisPlayInfoRequest struct {
	GetDisPlayInfoRequest *GetDisPlayInfoRequest `protobuf:"bytes,5,opt,name=getDisPlayInfoRequest,proto3,oneof"`
}

func (*PluginMessage_Resp) isPluginMessage_Body() {}

func (*PluginMessage_PluginInfoRequest) isPluginMessage_Body() {}

func (*PluginMessage_KeyMouseMoveRequest) isPluginMessage_Body() {}

func (*PluginMessage_GetDisPlayInfoRequest) isPluginMessage_Body() {}

var File_fada_plugin_data_proto protoreflect.FileDescriptor

var file_fada_plugin_data_proto_rawDesc = []byte{
	0x0a, 0x16, 0x66, 0x61, 0x64, 0x61, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a,
	0x12, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x74, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x53, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e,
	0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xc7, 0x01, 0x0a,
	0x0a, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x4b, 0x65,
	0x79, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x4d, 0x6f, 0x75, 0x73, 0x65,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12, 0x22,
	0x0a, 0x0d, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x58, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x65, 0x6c,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x59, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x14, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x45, 0x0a, 0x12, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x42, 0x06, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x3f, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc2, 0x02, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x13,
	0x6b, 0x65, 0x79, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4b, 0x65, 0x79, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6b,
	0x65, 0x79, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x2a, 0x96, 0x01, 0x0a, 0x12, 0x4b,
	0x65, 0x79, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x76,
	0x65, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x10, 0x06, 0x2a, 0x4e, 0x0a, 0x0f, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x10, 0x03, 0x2a, 0xbb, 0x09, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x6c, 0x74, 0x47, 0x72, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x73, 0x4c, 0x6f,
	0x63, 0x6b, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4c,
	0x65, 0x66, 0x74, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x72, 0x72, 0x6f, 0x77,
	0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x10, 0x0a, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x31, 0x10, 0x0b, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x31, 0x30, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x31, 0x31, 0x10,
	0x0d, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x31, 0x32, 0x10, 0x0e, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x32,
	0x10, 0x0f, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x33, 0x10, 0x10, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x34,
	0x10, 0x11, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x35, 0x10, 0x12, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x36,
	0x10, 0x13, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x37, 0x10, 0x14, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x38,
	0x10, 0x15, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x39, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f,
	0x6d, 0x65, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x72, 0x72, 0x6f,
	0x77, 0x10, 0x18, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x65, 0x66, 0x74, 0x10,
	0x19, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x1a,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x1b, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x61, 0x67, 0x65, 0x55, 0x70, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x10, 0x1d, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x10, 0x1e, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x68, 0x69, 0x66, 0x74, 0x4c,
	0x65, 0x66, 0x74, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x20, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x63, 0x65, 0x10, 0x21,
	0x12, 0x07, 0x0a, 0x03, 0x54, 0x61, 0x62, 0x10, 0x22, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x70, 0x41,
	0x72, 0x72, 0x6f, 0x77, 0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x24, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x25, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x10, 0x26, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x75, 0x6d, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x27, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x10, 0x28, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x31, 0x10, 0x29, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x32,
	0x10, 0x2a, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x33, 0x10, 0x2b, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x75, 0x6d, 0x34, 0x10, 0x2c, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x35, 0x10, 0x2d,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x36, 0x10, 0x2e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75,
	0x6d, 0x37, 0x10, 0x2f, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x38, 0x10, 0x30, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x39, 0x10, 0x31, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x75, 0x6d, 0x30,
	0x10, 0x32, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x33, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x34, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x51,
	0x10, 0x35, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x57, 0x10, 0x36, 0x12, 0x08, 0x0a, 0x04,
	0x4b, 0x65, 0x79, 0x45, 0x10, 0x37, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x38,
	0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x54, 0x10, 0x39, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65,
	0x79, 0x59, 0x10, 0x3a, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x55, 0x10, 0x3b, 0x12, 0x08,
	0x0a, 0x04, 0x4b, 0x65, 0x79, 0x49, 0x10, 0x3c, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x4f,
	0x10, 0x3d, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x50, 0x10, 0x3e, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x65, 0x66, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x3f, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x40, 0x12,
	0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x41, 0x10, 0x41, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79,
	0x53, 0x10, 0x42, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x44, 0x10, 0x43, 0x12, 0x08, 0x0a,
	0x04, 0x4b, 0x65, 0x79, 0x46, 0x10, 0x44, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x47, 0x10,
	0x45, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x48, 0x10, 0x46, 0x12, 0x08, 0x0a, 0x04, 0x4b,
	0x65, 0x79, 0x4a, 0x10, 0x47, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x4b, 0x10, 0x48, 0x12,
	0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x4c, 0x10, 0x49, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x6d,
	0x69, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x10, 0x4a, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x10, 0x4b, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x6c, 0x61, 0x73, 0x68,
	0x10, 0x4c, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x10, 0x4d, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x5a, 0x10, 0x4e, 0x12,
	0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x58, 0x10, 0x4f, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79,
	0x43, 0x10, 0x50, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x56, 0x10, 0x51, 0x12, 0x08, 0x0a,
	0x04, 0x4b, 0x65, 0x79, 0x42, 0x10, 0x52, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x4e, 0x10,
	0x53, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x4d, 0x10, 0x54, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x10, 0x55, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x6f, 0x74, 0x10, 0x56, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x10, 0x57, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x10, 0x58, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x70, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x10, 0x59, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x70, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10,
	0x5a, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x70, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x5b, 0x12, 0x0e, 0x0a,
	0x0a, 0x4b, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x10, 0x5c, 0x12, 0x0c, 0x0a,
	0x08, 0x4b, 0x70, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x10, 0x5d, 0x12, 0x07, 0x0a, 0x03, 0x4b,
	0x70, 0x30, 0x10, 0x5e, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x70, 0x31, 0x10, 0x5f, 0x12, 0x07, 0x0a,
	0x03, 0x4b, 0x70, 0x32, 0x10, 0x60, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x70, 0x33, 0x10, 0x61, 0x12,
	0x07, 0x0a, 0x03, 0x4b, 0x70, 0x34, 0x10, 0x62, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x70, 0x35, 0x10,
	0x63, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x70, 0x36, 0x10, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x70,
	0x37, 0x10, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x70, 0x38, 0x10, 0x66, 0x12, 0x07, 0x0a, 0x03,
	0x4b, 0x70, 0x39, 0x10, 0x67, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x68, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x69, 0x2a, 0x92, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x65, 0x79, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x42, 0x30, 0x5a, 0x2e, 0x66, 0x61, 0x64, 0x61, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x3b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fada_plugin_data_proto_rawDescOnce sync.Once
	file_fada_plugin_data_proto_rawDescData = file_fada_plugin_data_proto_rawDesc
)

func file_fada_plugin_data_proto_rawDescGZIP() []byte {
	file_fada_plugin_data_proto_rawDescOnce.Do(func() {
		file_fada_plugin_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_fada_plugin_data_proto_rawDescData)
	})
	return file_fada_plugin_data_proto_rawDescData
}

var file_fada_plugin_data_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_fada_plugin_data_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_fada_plugin_data_proto_goTypes = []any{
	(KeyMouseActionType)(0),       // 0: KeyMouseActionType
	(MouseButtonType)(0),          // 1: MouseButtonType
	(KeyType)(0),                  // 2: KeyType
	(MessageType)(0),              // 3: MessageType
	(*PluginInfoRequest)(nil),     // 4: PluginInfoRequest
	(*PluginInfoResponse)(nil),    // 5: PluginInfoResponse
	(*KeyMouseRequest)(nil),       // 6: KeyMouseRequest
	(*KeyEvent)(nil),              // 7: KeyEvent
	(*MouseEvent)(nil),            // 8: MouseEvent
	(*GetDisPlayInfoRequest)(nil), // 9: GetDisPlayInfoRequest
	(*DisPlayInfoRequest)(nil),    // 10: DisPlayInfoRequest
	(*MsgResp)(nil),               // 11: MsgResp
	(*DisplayInfoResp)(nil),       // 12: DisplayInfoResp
	(*PluginMessage)(nil),         // 13: PluginMessage
}
var file_fada_plugin_data_proto_depIdxs = []int32{
	7,  // 0: KeyMouseRequest.key_event:type_name -> KeyEvent
	8,  // 1: KeyMouseRequest.mouse_event:type_name -> MouseEvent
	0,  // 2: KeyEvent.action:type_name -> KeyMouseActionType
	2,  // 3: KeyEvent.key:type_name -> KeyType
	0,  // 4: MouseEvent.action:type_name -> KeyMouseActionType
	1,  // 5: MouseEvent.button:type_name -> MouseButtonType
	5,  // 6: MsgResp.PluginInfoResponse:type_name -> PluginInfoResponse
	12, // 7: MsgResp.displayInfoResp:type_name -> DisplayInfoResp
	3,  // 8: PluginMessage.message_type:type_name -> MessageType
	11, // 9: PluginMessage.resp:type_name -> MsgResp
	4,  // 10: PluginMessage.pluginInfoRequest:type_name -> PluginInfoRequest
	6,  // 11: PluginMessage.keyMouseMoveRequest:type_name -> KeyMouseRequest
	9,  // 12: PluginMessage.getDisPlayInfoRequest:type_name -> GetDisPlayInfoRequest
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_fada_plugin_data_proto_init() }
func file_fada_plugin_data_proto_init() {
	if File_fada_plugin_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fada_plugin_data_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PluginInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fada_plugin_data_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PluginInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fada_plugin_data_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*KeyMouseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fada_plugin_data_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*KeyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fada_plugin_data_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MouseEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fada_plugin_data_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetDisPlayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fada_plugin_data_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DisPlayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fada_plugin_data_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fada_plugin_data_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DisplayInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fada_plugin_data_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PluginMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fada_plugin_data_proto_msgTypes[2].OneofWrappers = []any{
		(*KeyMouseRequest_KeyEvent)(nil),
		(*KeyMouseRequest_MouseEvent)(nil),
	}
	file_fada_plugin_data_proto_msgTypes[7].OneofWrappers = []any{
		(*MsgResp_PluginInfoResponse)(nil),
		(*MsgResp_DisplayInfoResp)(nil),
	}
	file_fada_plugin_data_proto_msgTypes[9].OneofWrappers = []any{
		(*PluginMessage_Resp)(nil),
		(*PluginMessage_PluginInfoRequest)(nil),
		(*PluginMessage_KeyMouseMoveRequest)(nil),
		(*PluginMessage_GetDisPlayInfoRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fada_plugin_data_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fada_plugin_data_proto_goTypes,
		DependencyIndexes: file_fada_plugin_data_proto_depIdxs,
		EnumInfos:         file_fada_plugin_data_proto_enumTypes,
		MessageInfos:      file_fada_plugin_data_proto_msgTypes,
	}.Build()
	File_fada_plugin_data_proto = out.File
	file_fada_plugin_data_proto_rawDesc = nil
	file_fada_plugin_data_proto_goTypes = nil
	file_fada_plugin_data_proto_depIdxs = nil
}
